{"version":3,"sources":["logo.svg","components/login.jsx","services/teamwork-api.js","components/feeds.jsx","components/not-found.jsx","components/common/navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","Component","getFeed","a","fetch","url","rawFeed","json","feed","console","log","message","Feeds","state","status","this","setState","data","className","length","map","style","width","title","article","src","href","id","onClick","NotFound","Navbar","props","pages","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","page","key","link","to","name","placeholder","App","component","Fragment","path","exact","from","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,4ICU5BC,G,6LANX,OACE,uD,GAHcC,c,yBCAPC,EAAO,uCAAG,8BAAAC,EAAA,sEAEF,OAFE,SAGGC,MAAMC,qDAHT,cAGbC,EAHa,gBAIAA,EAAQC,OAJR,cAIbC,EAJa,yBAKZA,GALY,kCAOnBC,QAAQC,IAAI,KAAEC,SAPK,0DAAH,qDCqCLC,E,2MAnCbC,MAAQ,CACNL,KAAM,I,mNAIaN,I,OACC,aADdM,E,QACGM,QACPC,KAAKC,SAAS,CAAER,KAAMA,EAAKS,OAE7BR,QAAQC,IAAIF,G,qIAIZ,OACE,yBAAKU,UAAU,OACZH,KAAKF,MAAML,KAAKW,OAAS,EACxBJ,KAAKF,MAAML,KAAKY,KAAI,SAAAZ,GAAI,OACtB,yBAAKU,UAAU,YACb,yBAAKA,UAAU,OAAOG,MAAO,CAACC,MAAO,SACrC,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,cAAcV,EAAKe,OACjC,uBAAGL,UAAU,aAAaV,EAAKgB,QAAUhB,EAAKgB,QAAW,yBAAKC,IAAKjB,EAAKH,IAAKiB,MAAM,UACnF,uBAAGI,KAAI,eAAUlB,EAAKmB,IAAMT,UAAU,kBAAkBU,QAAQ,IAAhE,cAMN,qC,GA7BU3B,aCDC4B,E,iLAEjB,OACE,6C,GAHgC5B,a,QC4BvB6B,EA3BA,SAACC,GAAW,IACjBC,EAAUD,EAAVC,MAER,OACE,yBAAKd,UAAU,iDACb,uBAAGA,UAAU,eAAeQ,KAAK,KAAjC,UACA,4BAAQR,UAAU,iBAAiBe,KAAK,SAASC,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQC,aAAW,qBACpL,0BAAMpB,UAAU,yBAGlB,yBAAKA,UAAU,2BAA2BS,GAAG,0BAC3C,wBAAIT,UAAU,sBACXc,EAAMZ,KAAI,SAAAmB,GAAI,OACb,wBAAIrB,UAAU,mBACZ,kBAAC,IAAD,CAASsB,IAAKD,EAAKE,KAAMC,GAAIH,EAAKE,KAAMvB,UAAU,YAAYqB,EAAKI,WAIzE,0BAAMzB,UAAU,4BACd,2BAAOA,UAAU,uBAAuBe,KAAK,SAASW,YAAY,SAASN,aAAW,WACtF,4BAAQpB,UAAU,uCAAuCe,KAAK,UAA9D,c,QCuBKY,E,2MApCbhC,MAAQ,CACNmB,MAAO,CACL,CAACW,KAAM,OAAQF,KAAM,IAAKK,UAAWlC,GACrC,CAAC+B,KAAM,QAASF,KAAM,SAAUK,UAAW9C,K,wEAIrC,IACAgC,EAAUjB,KAAKF,MAAfmB,MACR,OACE,kBAAC,IAAMe,SAAP,KACE,0BAAM7B,UAAU,aACd,kBAAC,EAAD,CAAQc,MAAQA,IAChB,kBAAC,IAAD,KAEIA,EAAMZ,KAAI,SAAAmB,GAAI,OACZ,kBAAC,IAAD,CAAOS,KACLT,EAAKE,KAEPQ,OAAK,EAACH,UACJP,EAAKO,UAEPN,IAAKD,EAAKE,UAId,kBAAC,IAAD,CAAOO,KAAK,aAAaF,UAAYjB,IACrC,kBAAC,IAAD,CAAUqB,KAAK,IAAID,OAAK,EAAEP,GAAG,YAC7B,kBAAC,IAAD,CAAUA,GAAG,sB,GA7BPzC,aCGEkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCTNC,IAASC,OAAO,kBAAC,IAAD,KAAe,kBAAC,EAAD,OAAyBC,SAASC,eAAe,SDwH1E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e112b999.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { Component } from 'react';\n\nclass Login extends Component {\n  render() {\n    return (\n      <h1>Welcome to TeamWork</h1>\n    )\n  }\n}\n\nexport default Login;","const url = 'https://kunsal-teamwork.herokuapp.com/api/v1/';\n\nexport const getFeed = async () => {\n  try {\n    const endpoint = 'feed'\n    const rawFeed = await fetch(url + endpoint);\n    const feed = await rawFeed.json();\n    return feed;\n  } catch (e) {\n    console.log(e.message);\n  }\n  \n}","import React, { Component } from 'react';\nimport { getFeed } from '../services/teamwork-api';\n\nclass Feeds extends Component {\n  state = { \n    feed: {}\n   }\n\n  async componentDidMount() {\n    const feed = await getFeed();\n    if (feed.status === 'success') {\n      this.setState({ feed: feed.data })\n    }\n    console.log(feed);\n  }\n\n  render() { \n    return ( \n      <div className=\"row\">\n        {this.state.feed.length > 0 ? \n          this.state.feed.map(feed => (\n            <div className=\"col-md-4\">\n              <div className=\"card\" style={{width: '100%'}}>\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">{feed.title}</h5>\n                <p className=\"card-text\">{feed.article ? feed.article : (<img src={feed.url} width=\"100%\" />)}</p>\n                <a href={`feed/${feed.id}`} className=\"btn btn-primary\" onClick=\"\">View</a>\n              </div>\n              </div>\n            </div>\n          ))\n          : \n          'Loading......................'\n        }\n      </div>\n     );\n  }\n}\n \nexport default Feeds;","import React, { Component } from 'react';\n\nexport default class NotFound extends Component {\n  render() {\n    return (\n      <h1>Not Found</h1>\n    );\n  }\n}","import React from 'react';\nimport { Link, NavLink } from 'react-router-dom';\n\nconst Navbar = (props) => {\n  const { pages } = props;\n\n  return (\n    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n      <a className=\"navbar-brand\" href=\"#\">Navbar</a>\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n        <ul className=\"navbar-nav mr-auto\">\n          {pages.map(page => (\n            <li className=\"nav-item active\">\n              <NavLink key={page.link} to={page.link} className=\"nav-link\">{page.name}</NavLink>\n            </li>\n          ))} \n        </ul>\n        <form className=\"form-inline my-2 my-lg-0\">\n          <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n          <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n        </form>\n      </div>\n    </nav>\n  );\n}\n\nexport default Navbar;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Login from './components/login';\nimport Feeds from './components/feeds';\nimport NotFound from './components/not-found';\nimport Navbar from './components/common/navbar';\nimport { Route, Redirect, Switch } from 'react-router-dom';\n\nclass App extends Component {\n  state = {\n    pages: [\n      {name: 'Home', link: '/', component: Feeds},\n      {name: 'Login', link: '/login', component: Login},\n    ]\n  }\n \n  render() {\n    const { pages } = this.state;\n    return (\n      <React.Fragment>\n        <main className=\"container\">\n          <Navbar pages={ pages } />\n          <Switch>\n            {\n              pages.map(page => ( \n                <Route path = {\n                  page.link\n                }\n                exact component = {\n                  page.component\n                }\n                key={page.link}\n                />\n              ))\n            }\n            <Route path=\"/not-found\" component={ NotFound } />\n            <Redirect from=\"/\" exact  to=\"/movies\" />\n            <Redirect to=\"/not-found\" />\n          </Switch>\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}